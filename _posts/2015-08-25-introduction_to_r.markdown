---
layout:     post
title:      "Обзор курса edX: DAT204x Introduction to R, основы R."
date:       2015-08-25 12:00:00
author:     "Vasiliy Zemlyanov"
header-img: "img/test3.jpg"
---

# Язык программирования R

**R** - язык программирования предназначенный для статистическиз вычислений.
Является open-source реализацией языка S.

Преимущества R

- OpenSource
- Графические возможности
- Переносимость
- Расширения
- Сообщество

Недостатки

- Сложно изучить
- Легко написать код, который будет сложно поддерживать
- Плохо написанный код будет работать медленно

# Обзор edX: DAT204x Introduction to R

Абсолютно базовый курс по R. В курсе дают введение в синтаксис и знакомят с основными структурами данных в R: базовыми типами, массивами, списками, матрицами и datafram-ами.
Сначала предлагается посмотреть простое 5 минутное видео на заданную тему, потом ответить на такие-же простые вопросы по этому виде и пройти интерактивную лабораторную работу на https://campus.datacamp.com.
Я считаю что дать такие основы можно было и быстрее, сэкономив время для более прикладных примеров работы с R.
Курс подойдет как вводный для тек кто никогда не видел R и хочет с ним ознакомиться, либо тех кто уже знаком с R, но хочет быстрой пробежаться по основам.

#Основы

Простые вычисления и эксперементы можно проводить непосредственно в интерактивной консоли R.

Для присваивания в R используется `<-` вместо привычного `=`.

{% highlight R %}
#  Комментарии начинаются со знака слэша.
#  Создадим нескольк переменных
> width <- 5
> height <- 4

# Используем их для дальнейших вычислений
> square <- width * height
> perimeter <- 2 * (height + width)
> square
[1] 20
> perimeter
[1] 18

# Функция "rm" - отображает переменные в текущем окружении
> ls()
[1] "height" "width" "square" "perimeter"

# Функция "rm" - удаляет переменную
> rm(perimeter)
> ls()
[1] "height" "width" "square"
{% endhighlight %}

Для более сложных вычислении стоит создавать R-скрипты, файлы с расширением `.R`. 

{% highlight R %}
"Computer the square of circle."
r <- 3 
square <- pi * r ^ 2
square
{% endhighlight %}

Для запуска скритпа необходимо...

#Базовые типы данных

Логические значения `TRUE` и `FALSE` соответствуют типу данных `logical`.
Еще `logical` соответсвует значение `NA`, но сейчас это не важно.

Для определения типа данных переменной в R существует функция `class()`, которая принимает переменную и возвращает ее тип. 

{% highlight R %}
> class(TRUE)
[1] "logical"
{% endhighlight %}

`numeric` - числовой тип данных, поддерживает основные арифметические операции.

{% highlight R %}
> 2
[1] 2
> 2.5
[1] 2.5
> 3 + 8.4
[1] 11.4
> 7 ^ 4
[1] 2401
{% endhighlight %}

Частным случаем `numeric` является целочисленный тип `integer`. Для указания что число является целочисленным к нему необходимо дописать `L`.

{% highlight R %}
# Это numeric
> 2
# А это integer
> 2L
{% endhighlight %}

Все `integer` являются `numeric`, но не все `numeric` являются `integer`.

Стороковым типом данных является `character`, тут все просто.

{% highlight R %}
> "Hello, World!"
{% endhighlight %}

Другие базовые типы:
`double`: вещественное число с повышенной точностью;
`complex`: комплексное число;
`raw`: бинарная строка.

#Узнаем тип переменной и конвертируем типы

Для проверки относится ли переменная к какому-либо типу можно использовать функции вида `is.*`:

{% highlight R %}
# Возвращаясь к numeric и integer
is.numeric(5) # TRUE
is.numeric(5L) # TRUE
is.integer(3) # FALSE
is.integer(3L) # TRUE

# Другие типы
is.character("Mew!") # TRUE
is.logical(FALSE) # TRUE
{% endhighlight %}

Для конвертации типов используются функции вила `as.*`:

{% highlight R %}
# logical в numeric
as.numeric(TRUE) # 1
as.numeric(FALSE) # 0

# numeric в character
as.character(8) # "8"

# character в numeric
as.numeric("4.2") # 4.2

# character в integer
as.integer("4.2") # 4

# а так делать нельзя.
as.numeric("Test") # NA
{% endhighlight %}

#Векторы

Вектор в R это набор элементов одного типа.
Создать вектор можно с помощью функции `c()`, что является сокращением от combine.

{% highlight R %}
# Вектор строк
> suits <- c("spades", "hearts", "diamonds", "clubs")
> suits
[1] "hearts", "spades", "diamonds"

> is.vector(suits)
[1] TRUE

# Вектор чисел
> remain <- c(10, 11, 13, 8)
> remain
[1] 10, 15, 13, 8
{% endhighlight %}

Длину вектора можно найти с помощью функции `length()`

{% highlight R %}
> length(remain)
[1] 4
{% endhighlight %}

Каждому элементу вектора можно присвоить имя. Сделать это можно несколькими способами:

{% highlight R %}
# С помощью функции names()
> names(remain) <- suits
> remain
spades hearts diamonds clubs
    10     11       13     8

# Во время создания объекта
remain <- c("spades" = 10, "hearts" = 11, "diamonds" = 13, "clubs" = 8) 
# Имена при этом можно не заключать в кавычки. Прошлая команда равносильна
remain <- c(spades = 10, hearts = 11, diamonds = 13, clubs = 8)
{% endhighlight %}

На самом деле все базовые типы R являются векторами, состоящими из 1 элемента.
{% highlight R %}
> day_number <- 1
> day_title <- "Monday"

> is.vector(day_number)
[1] TRUE
> is.vector(day_title)
[1] TRUE
> length(day_number)
[1] 1
> length(day_title)
[1] 1
{% endhighlight %}

Вектор может содержать элементы только одного типа, поэтому при попытке создать вектор содержащий элементы нескольких типов будет произведена конвертация типов к наиболее общему.

{% highlight R %}
# Все numeric будут конвертированы к более общему типу character
> ranks <- c(1, 4, 9, "A")
> ranks
[1] "1" "4" "9" "A"

>class(ranks)
[1] "character"
{% endhighlight %}

#Списки

Списки -

#Матрицы

Матрицы - 

#Data-Frams

Data-Frams -

#Построение графиков

