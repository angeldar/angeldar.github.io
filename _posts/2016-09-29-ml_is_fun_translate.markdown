---
layout:     post
title:      "ML is Fun"
date:       2016-09-28 00:00:00 +0200
author:     "Vasiliy Zemlyanov"
header-img: "img/post-bg-07.jpg"
---

# Машинное обучение это весело!

## Самое простое введение в машинное обучение.

Вы слышали как люди говорят об Машинном обучении но имеете довольно смутное представление об этом странном термине? Вы устали кивать головой в диалогах с коллегами? Давайте изменим это!

***

Эта статья для всех кто интересуется машинным обучением, но не знает с чего начать. Думаю многие пытались прочитать статью на википедии[ссылка], рассторились и сдались, желая получить объяснение попроще. Это как раз оно.

Цель статьи, быть доступной для всех - значит будет много обощений. Но кого это волнует? Если это заинтересует кого-то в ML, значит работа проделана не зря.

***

# Что такое машинное обучение?

Машинное обучение это идея о существовании обобщенных алгоритмов, способных рассказать что-то интересное о данных, без написания специфичного кода под каждую задачу. Вместо написания кода вы просто передаете данные обобщенному алгоритму и он строит собственую логику на оснве данных.

Например, один из видов алгоритмов это алгоритмы классификации. Они могут разделять данные на разные группы. Один и тот же алгоритм классификации может быть использован как для распознания рукописных цифр так и для выявления спама в почте, без изменения кода. Это тот же алгоритм, но будучи обучен на других данных, он построит другую логику классификации.

[картинка]

"Машинное обучение" это обощающий термин, включающий множество обощенных алгоритмов.

# Два типа алгоритмов машинного обучения

Упрощенно можно разделить все алгоритмы машинного обучения на 2 основные категории - **обучение с учителем** (*supervised learning*) и **обучение без учителя** (*unsupervised learning*). Отличие простое, но действительно важное.

## Обучение с учителем

Допустим вы агент по продаже недвижимости. Ваш бизнес развивается и вы нанимаете нескольких стажеров. Только вот проблема: вы можете оценить недвижимость и сделать отличное предположение о стоимости, но у стажеров нет вашего опыта и они не знают, как оценивать недвижимость.

Для помощи стажерам (и освобождения собственного времени), вы решили написать небольшое приложение, которое сможет оценить стоимость недвижимости в вашей области, на основе размера, района, похожих домов проданных недавно и тому подобного.

Вы записываете всю недвижимость проданную  в течении 3 месяцев. Для каждой сделки сохраняете множество деталей: количество комнат, квадратных метров, район и т.д. Но самое главное, вы выписываете цену продажи:

[картинка]

Используя эти тренировочные данные мы хотим написать программу, способную оценить другую недвижимость в регионе.

[картинка]

Этот подход называется **Обучением с учителем** (*Supervised learning*). Вы знаете, за сколько был продан каждый дом, другими словами, знаете ответ задачи и можете продвигаться обратно к условию, конструируя логику решения в обратном порядке.

Для создания приложения вы передаете алгоритму машинного обучения тренировочные данные. Алгоритм пытается выяснить, какие математические соотношения связывают эти числа.

Простая аналогия: вам известны ответы теста по математике, но часть условия (какие именно операции были выполнены над числами), стерлась.

[Картинка]

Вы можете выяснить какая задача стоит в тесте? Нужно что-то сделать с числами слева для получения ответа справа.

При **обучении с учителем** вы позволяете компьютеру установить это соотношение за вас. И когда узнаете, какая математика нужна для решения определенного множества задач, сможете решать любые задачи этого типа!

# Обучение без учителя

Вернемся к примеру с агентом по недвижимости. Что если вы не знаете, за сколько были проданы дома? Даже если известны только размер недвижимости, ее местоположение и другие параметры (но неизвестна цена), вы все еще можете сделать интересные вещи. Это называется **Обучением без учителя** (*unsupervised learning*).

[картинка]

Как если бы кто-то дал вам лист бумаги исписанный цифрами и сказал: "Я не знаю что это за цифры, но может у тебя получится найти в них закономерность - удачи! (*счастья, здоровья, держитесь там.* прим. переводчика)".

Что вы можете сделать с данными? Дла начала, можно использовать алгоритм, который автоматически классифицирует разные сегменты рынка недвижимости на основе данных. Может выяснится, что домовладельцы в районе ближайшего университета предпочитают маленькие дома, с большим количеством спален, но домовладельцы в пригородах предпочитают дома большой площади с 3 спальнями. Понимание покупателей разных типов может помочь в маркетиге.

Другая крутая штука, доступная вам, автоматическое определение выбросов (ссылка на определние выброса (прим. переводчика)), т.е. такой недвижимости, которая выделяется на общем фоне. Возможно, этими выбросами окажутся гигантские особняки и стоит сфокусировать лучших продавцов на этом сегменте, предвкушая наибольшие комиссионные.

В данной статье мы сфокусируемся на обучении с учителем, но не потому, что обучение без учителя менее полезно или интересно. Обучение без учителя становится все более важным по мере улучшения алгоритмов и потому, что зачастую может быть сложно найти правильно размеченные данные.

*Замечение для педантов: Существует множество [других типов] алгоритмов машинного обучения. Но для начала нам хватит этих двух.*

# Все здорово, но почему оценка стоимости недвижимости считается "обучением" ?

Человеческий мозг может найти подход практически к любой ситуации и научиться справляться с ней без четких инструкций. Если вы давно продаете недвижимость, то инстинктивно "знаете" правильную стоимость, лучший рынок, заинтересованных клиентов и тому подобное. Цель исследований о [Сильном ИИ] повторить эту возможность с помощью компьютеров.

Но современные алгоритмы машинного обучения не настолько хороши - они работают только для обособленного, ограниченного круга задач. Возможно, вместо "обучения" стоило использовать "нахождение уравнения для решения определенной задачи на основе данных из примера".

К сожалению, "Машинное нахождение уравнения для решения определенной задачи на основе данных из примера" не самое изящное название. Поэтому остановились на "Машинном обучении".

Конечно, если вы читаете эту статью через 50 лет и мы разработали алгоритмы Сильного ИИ, тогда вся статья выглядит слегка причудливой. Можешь заканчивать чтерие и приказать роботу-слуге приготовить бутерброды, человек из будущего!

# Напишем программу!

Итак, как вы напишете программу оценки стоимости жилья, используя вышеуказанный пример? Немного подумайте об этом перед тем как продолжить.

Если вы ничего не знаете о машинном обучени, то вероятно попробуете выработать набор простых правил для оценки стоимости, например:

{% highlight python %}
def estimate_house_sales_price(num_of_bedrooms, sqft, neighborhood):
  price = 0
  # В моей области средняя стоимость квадратного метра $200 за 1 кв. м.
  price_per_sqft = 200
  if neighborhood == "hipsterton":
    # Но в некоторых районах стоимость дороже
    price_per_sqft = 400
  elif neighborhood == "skid row":
    # А в некоторых дешевле
    price_per_sqft = 100
  # Начнем с базовой цены умноженной на площадь недвижимости
  price = price_per_sqft * sqft
  # Сделаем поправку на количество спален
  if num_of_bedrooms == 0:
    # Аппартаменты-студии дешевые
    price = price - 20000
  else:
    # Недвижимость с большим количеством спален обычно дороже
    price = price + (num_of_bedrooms * 1000)
 return price
{% endhighlight %}

Возможно вы даже получите что-то работающее, если поиграетесь с этим достаточно долго. Но эта программа никогда не будет точной и при изменении цен потребует значительных изменений.

А что, если бы компьютер знал, как разработать эту функцию за нас? Кого волнует, что делает эта функция, пока она возвращает правильный ответ?

{% highlight python %}
def estimate_house_sales_price(num_of_bedrooms, sqft, neighborhood):
  price = <компьютер, будь добр, реши математику за меня>''
  return price
{% endhighlight %}

Один из способов думать об этой задаче: **цена** это изысканное блюдо, а ингридиенты это **количество комнат**, **квадратные метры** и **район**. Если бы вы только поняли, как каждый ингридиент влияет на конечную цену. Возможно, существует точное соотношение ингридиентов, смешав которые, мы получим итоговую цену.

Это упростит нашу первоначальную функцию (со всеми сумасшедшими условиями) до чего-то простого, например:

{% highlight python %}
def estimate_house_sales_price(num_of_bedrooms, sqft, neighborhood):
    price = 0
    # щепотку этого
    price += num_of_bedrooms * .841231951398213
    # и большую щепотку вот этого
    price += sqft * 1231.1231231
    # может немного этого
    price += neighborhood * 2.3242341421
    # и наконец, тщательно взвещенная щепотка соли
    price += 201.23432095
    return price
{% endhighlight %}

Обратите внимание на волшебные цифры: .841231951398213, 1231.1231231, 2.3242341421 и 201.23432095. Это **веса** функции. Если мы выясним идеальные веса, которые подойдут для любого дома, наша функция сможет предсказывать стоимость недвижимости!

Глупый способ выяснить лучшие веса выглядит примерно так:

### Шаг 1:

Инициализируем каждый вес значением 1.0:

{% highlight python %}
def estimate_house_sales_price(num_of_bedrooms, sqft, neighborhood):
  price = 0
  # щепотку этого
  price += num_of_bedrooms * 1.0
  # и большую щепотку вот этого
  price += sqft * 1.0
  # может немного этого
  price += neighborhood * 1.0
  # и наконец, тщательно взвещенная щепотка соли
  price += 1.0
  return price
{% endhighlight %}

### Шаг 2:

Протестируем нашей функцией всю известную недвижимость и посмотрим, на сколько предсказание функции отличается от реальных цен:

[картинка]

Например, если первый дом был продан за `$250.000`, а наша функция предсказывает `$178.000`, мы недооценили этот дом на `$72.000`.

Теперь найдем сумму квадратов разностей по всем данным. Скажем, в наших данных есть записи о `500` домах, просуммировав ошибки для каждого дома мы получили `$86.123.373`. Наша функция ошибается на это значение.

Теперь возьмем сумму и разделим на `500` (количество известных нам домов), чтобы получить среднюю ошибку для одного дома. Назовем это средней ошибкой стоимости (*cost*, обычно назвают *среднеквадратичной ошибкой*, прим. переводчика) нашей функции.

Если вы сможете манипулируя весами уменьшить эту ошибку до `0`, то получите идеальную функцию. Это значит, что функция будет идеально предсказывать стоимость недвижимости на основе входных данных. Теперь это наша цель - разными способами уменьшить ошибку.

### Шаг 3:

Будем повторять **Шаг 2** снова и снова **для всех возможных комбинаций весов**. Использовать будем комбинацию, которая дает наименьшую ошибку. Как только мы найдем подходящие веса - решим задачу!

# Мозговыносящий поворот

Вроде просто, да? Теперь подумаем о том, что мы сделали. Мы взяли какие-то данные, передали обобщенному алгоритму, выполнили несложные шаги и получили функцию, которая может оценить стоимость любой недвижимости в области.

А теперь немного мозговыносящих фактов:

1. Исследования во многих областях (например лингвистика/переводы) за последние 40 лет показывают, что "приготовление рагу из чисел" показывает лучшие результаты, чем подходы, в которых люди пытаются составить набор правил самостоятельно. "Глупый" подход машинного обучения в итоге превосходит экспертов-людей. (прим. переводчика. По моему области для примера подобраны неудачно.)
2. Полученная нами функция невероятно глупа. Она не знает ничего о "квадратных метрах" или "спальнях". Все, что она знает, как смешать все эти цифры и получить правильный ответ.
3. Вполне возможно у нас не будет понимания, **почему** определенный набор весов работает. Мы написали функцию, которую не до конца понимаем, но можем доказать ее работоспособность.
4. Представим, что вместо "квадратных метров" и "количества комнат" наше предсказание основано на массивах чисел. Пусть каждое число представляет яркость одного пикселя изображения, которое снимает камера, установленная на вашей машине. А теперь, допустим, что вместо предсказания "цена" функция возвращает предсказание "угол_поворота_ведущего_колеса". Мы только что разработали простой автопилот!

Легкое сумасшествие, не правда ли?

# А что там с "переберем все числа" на шаге 3?

Да, конечно, в поисках наилучшей комбинации весов, мы не можем просто попробовать все возможные комбинации. Это займет вечность, ведь числа никогда не закончатся.

Во избежание этого, математики разработали множество [умных способов] для быстрого поисках хороших значение весов, без необходимости перебирать их все. Вот один из способов:

Сначала напишем простое уравнение, описывающее шаг #2:

[картинка]

Теперь, перепишем это же уравнение, используя лексикон машинного обучения (его можно пропустить на данном этапе):

[картинка]

Это уравнение описывает, на сколько ошибается наша функция оценки стоимости при заданных весах.

Если мы построим эту функцию для всех возможных весов `количества_комнат` и `квадратных_метров`, то получим примерно такой график:

[картинка]

Наименьшие значения на этом графике  выделены синим - здесь наша функция ошибается меньше всего. В наивысших точка (красных) мы ошибаемся сильнее всего. Если мы найдем веса, которые приведут нас к наименьшей точке, получим ответ!

[картинка]

########## Сделать рерайт, дословный перевод
Таким образом, нам просто нужно так настроить наши веса чтобы мы "спускались вниз по склону" на этом графике в направлении наименьшей точки. Если мы продолжим понемногу изменять веса, так, чтобы они всегда вели нас к низшей точке, в итоге мы доберемся к цели, без необходимости перебирать слишком много весов.

Если вы помните курс Мат. анализа, то возможно помните что производная функции, показывает наклон функции тангенса в любой точке??? Другими словами, она показывает, в каком направлении находится спуск для любой точки на графике. Мы можем использовать это для спуска.

Если мы вычислим частные производные нашей функции стоимости по весам, то сможем вычесть это значение из каждого веса. Это передвинет нас на один шаг ближе к дну спуска???. Продолжим делать это и в итоге мы достигнем дна склона и получим наилучшие значения наших веслов. (если это выглядит как сплошная бессмыслица не волнуйтесь и продолжайте чтение).

Это обобщенное краткое описание одного из способов найти наилучшие веса для нашей функции стоимости известное как batch градиентный спуск (batch gradient descent). Не бойтесь пойти глубже[сслыка] если вы заинтересованы в изучении деталей.

При решении реальных задач с  использованием библиотек машинного обучения, все это останется за кадром. Но все же хорошо понимать что происходит.

# О чем еще ты умолчал?

Трехшаговый алгоритм, описанный мною называется *multivariative linear regression*. Вы оцениваете уравнение для линиии, которая описывает все данные о вашей недвижимости. Затем вы используете это уравнение для предсказания цены на недвижимость, которую вы раньше не видели, на основе того, где эта недвижимость окажется на вышей линии. Это действительно можная идея с помощью которой можно решать реальные задачи.

Но хотя подход, который я показал работает для простых случаев, он не универсален. Одна из причин - стоимость недвижимости не всегда на столько проста, что бы быть описанной непрерывной линией.

Но к счастью существует множество способов справиться с этим. Есть много других алгоритмов машинного обучения, которые могут справиться с нелинейными данными (например нейронные сети (ссылка) или SVM (ссылка) с ядрами(ссылка)). Так же существуют более умные способы использования линейной регрессии, которые позволяют опсывать сложные закономерности.  Во всех случаях базовая идея поиска наилучших весов остается неизменной.

Еще я проигнорирвал понятие переобучения (overfitting). Легко придти к набору весов, которые будут отлично работать для предсказания недвижимости на тренировочных данных, но никогда не сработают для нового дома, которого не было в тренировочных данных. Существуют способы борьбы с этим (например регуляризация (ссылка) и использование кросс-валидации (ссылка)). Изучение того, как бороться с этой проблемой, ключевой момент для успешного применения машинного обучения.

Другими словами, хотя базовые принципы машинного обучения довольно просты, требуются определенные навыки и опыт для получения хороших результатов с помощью машинного обучения. Но это навык, который может освоить любой разработчик!

#######

# Машинное обучение - это магия?

Когда вы видите, на сколько просто техники машинного обучения могут быть применены к задачам, которые выглядели действительно сложными (например распознование рукописного текста), у вас возникает ощущение, что вы можете использовать машинное обучение для решения любой задачи и получить ответ, имея нужное количество данных. Просто передайте данные алгоритму и смотрить, как компьютер по волшебству находит уравнения, которые описывают данные!

Но важно помнить, что машинное обучение работает, только если проблему можно решить с помощью данных, которые у вас есть.

Например, если мы построим модель, которая предсказывает стоимость недвижимости, на основе домашних растений в каждом доме, это не сработает. Просто нет взаимосвязи между выращиваемыми в доме растениями и его стоимостью. Поэтому не важно, как сильно мы стараемся, компьютер не сможет найти связь.

[картинка]

Поэтому, если эксперт не может использовать данные для решения проблемы, компьютер, вероятно, тоже не сможет. Вместо этого, сфокусируемся на задачах, которые человек способен решить, и было бы здорово, если компьютер сможет решить их быстрее.

# Как узнать больше о машинном обучении

С моей точки зрения, самая большая проблема машинного обучения сейчас, это то, что оно сосредоточено в основном в академической среде и коммерческих исследовательских группах. Не так много простого в понимании материала для людей, которые хотели бы расширить кругозор не становясь при этом экспертами. Но ситуация исправляется с каждым днем.

Курс Машинное обучение [сслыка] Andrew Ng просто восхитителен. Я очень рекомендую начать с него. Он должен быть понятен любому человеку со степенью в Компьютерных науках и тех кто помнит немного математики.

Еще вы можете поиграть с огромным количеством алгоримов машинного обучения используя SkLearn [ссылка]. Это python фреймворк, реализующий "black box" версии стандартных алгоритмов.